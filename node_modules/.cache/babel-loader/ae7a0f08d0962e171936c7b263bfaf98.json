{"ast":null,"code":"import { useCallback, useEffect } from 'react';\nimport logger from '../logger';\n\nconst useWallet = (wallet, {\n  refreshIntervalId\n}, dispatch) => {\n  /**\n   * detect a wallet disconnecting and dispatch an event\n   */\n  useEffect(() => {\n    if (!wallet || !wallet.publicKey) {\n      logger.debug('wallet disconnected');\n\n      if (refreshIntervalId) {\n        logger.debug('useEffect clearInterval', refreshIntervalId);\n        clearInterval(refreshIntervalId);\n        dispatch({\n          type: 'refresh_clear_interval'\n        });\n      }\n\n      dispatch({\n        type: 'walletDisconnected'\n      });\n    }\n  }, [wallet, refreshIntervalId]);\n  /**\n   * expect a connected wallet, throw an error if a vald wallet isn't in state\n   */\n\n  const expectWalletConnected = useCallback(() => {\n    logger.debug('expectWalletConnected', wallet);\n\n    if (!wallet || !wallet.publicKey) {\n      throw new Error('No wallet connnected');\n    }\n\n    return wallet;\n  }, [wallet]);\n  return {\n    expectWalletConnected\n  };\n};\n\nexport default useWallet;","map":{"version":3,"sources":["C:/Users/mikec/candy-machine-v2-responsive-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useWalletHooks.js"],"names":["useCallback","useEffect","logger","useWallet","wallet","refreshIntervalId","dispatch","publicKey","debug","clearInterval","type","expectWalletConnected","Error"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AACA,MAAMC,SAAS,GAAG,CAACC,MAAD,EAAS;AAAEC,EAAAA;AAAF,CAAT,EAAgCC,QAAhC,KAA6C;AAC3D;AACJ;AACA;AACIL,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACG,MAAD,IAAW,CAACA,MAAM,CAACG,SAAvB,EAAkC;AAC9BL,MAAAA,MAAM,CAACM,KAAP,CAAa,qBAAb;;AACA,UAAIH,iBAAJ,EAAuB;AACnBH,QAAAA,MAAM,CAACM,KAAP,CAAa,yBAAb,EAAwCH,iBAAxC;AACAI,QAAAA,aAAa,CAACJ,iBAAD,CAAb;AACAC,QAAAA,QAAQ,CAAC;AAAEI,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACH;;AACDJ,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH;AACJ,GAVQ,EAUN,CAACN,MAAD,EAASC,iBAAT,CAVM,CAAT;AAWA;AACJ;AACA;;AACI,QAAMM,qBAAqB,GAAGX,WAAW,CAAC,MAAM;AAC5CE,IAAAA,MAAM,CAACM,KAAP,CAAa,uBAAb,EAAsCJ,MAAtC;;AACA,QAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACG,SAAvB,EAAkC;AAC9B,YAAM,IAAIK,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,WAAOR,MAAP;AACH,GANwC,EAMtC,CAACA,MAAD,CANsC,CAAzC;AAOA,SAAO;AACHO,IAAAA;AADG,GAAP;AAGH,CA5BD;;AA6BA,eAAeR,SAAf","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport logger from '../logger';\nconst useWallet = (wallet, { refreshIntervalId }, dispatch) => {\n    /**\n     * detect a wallet disconnecting and dispatch an event\n     */\n    useEffect(() => {\n        if (!wallet || !wallet.publicKey) {\n            logger.debug('wallet disconnected');\n            if (refreshIntervalId) {\n                logger.debug('useEffect clearInterval', refreshIntervalId);\n                clearInterval(refreshIntervalId);\n                dispatch({ type: 'refresh_clear_interval' });\n            }\n            dispatch({ type: 'walletDisconnected' });\n        }\n    }, [wallet, refreshIntervalId]);\n    /**\n     * expect a connected wallet, throw an error if a vald wallet isn't in state\n     */\n    const expectWalletConnected = useCallback(() => {\n        logger.debug('expectWalletConnected', wallet);\n        if (!wallet || !wallet.publicKey) {\n            throw new Error('No wallet connnected');\n        }\n        return wallet;\n    }, [wallet]);\n    return {\n        expectWalletConnected,\n    };\n};\nexport default useWallet;\n"]},"metadata":{},"sourceType":"module"}