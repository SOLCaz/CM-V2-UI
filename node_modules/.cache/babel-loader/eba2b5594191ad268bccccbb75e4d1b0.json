{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikec\\\\candy-machine-v2-responsive-ui\\\\src\\\\MintButton.tsx\",\n    _s = $RefreshSig$();\n\nimport styled from 'styled-components';\nimport { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  width: 140px;\n  font-size: 1.2em;\n`;\n_c = CTAButton;\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  isActive\n}) => {\n  _s();\n\n  const {\n    requestGatewayToken,\n    gatewayStatus\n  } = useGateway();\n  const [clicked, setClicked] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n  useEffect(() => {\n    setIsVerifying(false);\n\n    if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n      // when user approves wallet verification txn\n      setIsVerifying(true);\n    } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      console.log('Verified human, now minting...');\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n  return /*#__PURE__*/_jsxDEV(CTAButton, {\n    disabled: (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.isSoldOut) || isMinting || !isActive || isVerifying,\n    onClick: async () => {\n      if (isActive && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.gatekeeper) && gatewayStatus !== GatewayStatus.ACTIVE) {\n        console.log('Requesting gateway token');\n        setClicked(true);\n        await requestGatewayToken();\n      } else {\n        console.log('Minting...');\n        await onMint();\n      }\n    },\n    variant: \"contained\",\n    children: !candyMachine ? \"CONNECTING...\" : (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.isSoldOut) ? 'SOLD OUT' : isActive ? isVerifying ? 'VERIFYING...' : isMinting ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }, this) : \"MINT\" : (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.goLiveDate) ? \"SOON\" : \"UNAVAILABLE\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MintButton, \"FbKHpM/J4T2Q4+Vw5X3+WgkOtAU=\", false, function () {\n  return [useGateway];\n});\n\n_c2 = MintButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CTAButton\");\n$RefreshReg$(_c2, \"MintButton\");","map":{"version":3,"sources":["C:/Users/mikec/candy-machine-v2-responsive-ui/src/MintButton.tsx"],"names":["styled","useEffect","useState","Button","CircularProgress","GatewayStatus","useGateway","CTAButton","MintButton","onMint","candyMachine","isMinting","isActive","requestGatewayToken","gatewayStatus","clicked","setClicked","isVerifying","setIsVerifying","COLLECTING_USER_INFORMATION","ACTIVE","console","log","state","isSoldOut","gatekeeper","goLiveDate"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,gBAAR,QAA+B,mBAA/B;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,6BAA1C;;AAIA,OAAO,MAAMC,SAAS,GAAGP,MAAM,CAACG,MAAD,CAAS;AACxC;AACA;AACA;AACA;AACA;AACA,CANO;KAAMI,S;AAQb,OAAO,MAAMC,UAAU,GAAG,CAAC;AACIC,EAAAA,MADJ;AAEIC,EAAAA,YAFJ;AAGIC,EAAAA,SAHJ;AAIIC,EAAAA;AAJJ,CAAD,KAUpB;AAAA;;AACF,QAAM;AAAEC,IAAAA,mBAAF;AAAuBC,IAAAA;AAAvB,MAAyCR,UAAU,EAAzD;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,cAAc,CAAC,KAAD,CAAd;;AACA,QAAIJ,aAAa,KAAKT,aAAa,CAACc,2BAAhC,IAA+DJ,OAAnE,EAA4E;AACxE;AACAG,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAHD,MAIK,IAAIJ,aAAa,KAAKT,aAAa,CAACe,MAAhC,IAA0CL,OAA9C,EAAuD;AACxDM,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAb,MAAAA,MAAM;AACNO,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAXQ,EAWN,CAACF,aAAD,EAAgBC,OAAhB,EAAyBC,UAAzB,EAAqCP,MAArC,CAXM,CAAT;AAaA,sBACI,QAAC,SAAD;AACI,IAAA,QAAQ,EACJ,CAAAC,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEa,KAAd,CAAoBC,SAApB,KACAb,SADA,IAEA,CAACC,QAFD,IAGAK,WALR;AAOI,IAAA,OAAO,EAAE,YAAY;AACjB,UAAIL,QAAQ,KAAIF,YAAJ,aAAIA,YAAJ,uBAAIA,YAAY,CAAEa,KAAd,CAAoBE,UAAxB,CAAR,IAA8CX,aAAa,KAAKT,aAAa,CAACe,MAAlF,EAA0F;AACtFC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAN,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAMH,mBAAmB,EAAzB;AACH,OAJD,MAIO;AACHQ,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,cAAMb,MAAM,EAAZ;AACH;AACJ,KAhBL;AAiBI,IAAA,OAAO,EAAC,WAjBZ;AAAA,cAmBK,CAACC,YAAD,GACG,eADH,GAEG,CAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEa,KAAd,CAAoBC,SAApB,IACA,UADA,GAEAZ,QAAQ,GACRK,WAAW,GAAG,cAAH,GACPN,SAAS,gBACL,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YADK,GAGL,MALA,GAOP,CAAAD,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEa,KAAd,CAAoBG,UAApB,IACD,MADC,GAGD;AAjCR;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH,CAlEM;;GAAMlB,U;UAWsCF,U;;;MAXtCE,U","sourcesContent":["import styled from 'styled-components';\r\nimport { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { CandyMachine } from './candy-machine';\r\n\r\n\r\nexport const CTAButton = styled(Button)`\r\n  display: block !important;\r\n  margin: 0 auto !important;\r\n  background-color: var(--title-text-color) !important;\r\n  width: 140px;\r\n  font-size: 1.2em;\r\n`;\r\n\r\nexport const MintButton = ({\r\n                               onMint,\r\n                               candyMachine,\r\n                               isMinting,\r\n                               isActive\r\n                           }: {\r\n    onMint: () => Promise<void>;\r\n    candyMachine: CandyMachine | undefined;\r\n    isMinting: boolean;\r\n    isActive: boolean;\r\n}) => {\r\n    const { requestGatewayToken, gatewayStatus } = useGateway();\r\n    const [clicked, setClicked] = useState(false);\r\n    const [isVerifying, setIsVerifying] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsVerifying(false);\r\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\r\n            // when user approves wallet verification txn\r\n            setIsVerifying(true);\r\n        }\r\n        else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n            console.log('Verified human, now minting...');\r\n            onMint();\r\n            setClicked(false);\r\n        }\r\n    }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n    return (\r\n        <CTAButton\r\n            disabled={\r\n                candyMachine?.state.isSoldOut ||\r\n                isMinting ||\r\n                !isActive ||\r\n                isVerifying\r\n            }\r\n            onClick={async () => {\r\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\r\n                    console.log('Requesting gateway token');\r\n                    setClicked(true);\r\n                    await requestGatewayToken();\r\n                } else {\r\n                    console.log('Minting...');\r\n                    await onMint();\r\n                }\r\n            }}\r\n            variant=\"contained\"\r\n        >\r\n            {!candyMachine ? (\r\n                \"CONNECTING...\"\r\n            ) : candyMachine?.state.isSoldOut ? (\r\n                'SOLD OUT'\r\n            ) : isActive ? (\r\n                isVerifying ? 'VERIFYING...' :\r\n                    isMinting ? (\r\n                        <CircularProgress />\r\n                    ) : (\r\n                        \"MINT\"\r\n                    )\r\n            ) : (candyMachine?.state.goLiveDate ? (\r\n                \"SOON\"\r\n            ) : (\r\n                \"UNAVAILABLE\"\r\n            ))}\r\n        </CTAButton>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}